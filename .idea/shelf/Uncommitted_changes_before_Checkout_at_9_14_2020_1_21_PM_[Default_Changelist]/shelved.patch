Index: src/com/zauberschlosss/main/Puzzle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.zauberschlosss.main;\r\n\r\nimport com.zauberschlosss.listeners.FileChooserListener;\r\nimport com.zauberschlosss.listeners.KeyListener;\r\nimport com.zauberschlosss.listeners.URListener;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.awt.image.CropImageFilter;\r\nimport java.awt.image.FilteredImageSource;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.net.URL;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\npublic class Puzzle extends JFrame {\r\n    private JPanel panel = new JPanel();\r\n    private JPanel sourceImageTab;\r\n    private JPanel puzzlePicture;\r\n    private JTabbedPane tabsPane;\r\n    private JMenuItem playAgain;\r\n    private JMenuItem newPuzzle;\r\n    private JMenuItem rotateClockwise;\r\n    private JMenuItem rotateAnticlockwise;\r\n    private JMenuItem rotateAround;\r\n    private JMenuItem magicButton;\r\n    private JComboBox<Integer> gridSelection;\r\n    private JCheckBox checkBoxIsRotated;\r\n\r\n    private List<Button> buttons = new ArrayList<>();\r\n    private List<Point> solutionPoints = new ArrayList<>();\r\n    private List<Integer> solutionAngles = new ArrayList<>();\r\n    private Map<Integer, Long> solutionBitMap = new HashMap<>();\r\n    private Map<Integer, Long> piecesBitMap = new HashMap<>();\r\n    private List<Icon> icons = new ArrayList<>();\r\n\r\n    private Image image;\r\n    private int width, height;\r\n    private final int DESIRED_WIDTH = 800;\r\n    private BufferedImage source;\r\n    private BufferedImage resized;\r\n    private String dataSource;\r\n    private String uri;\r\n\r\n    private boolean initRotated = false;\r\n    private int rows;\r\n    private int columns;\r\n\r\n    private int counter = 100;\r\n\r\n    public Puzzle() throws URISyntaxException {\r\n        setupResourcesAndUI();\r\n    }\r\n\r\n    private void initUI() throws URISyntaxException {\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < columns; j++) {\r\n                solutionPoints.add(new Point(i, j));\r\n                solutionAngles.add(0);\r\n            }\r\n        }\r\n\r\n        panel.setBorder(BorderFactory.createLineBorder(Color.gray));\r\n        panel.setLayout(new GridLayout(rows, columns, 0, 0));\r\n        panel.addKeyListener(new KeyListener(this));\r\n\r\n        try {\r\n            source = loadImage(dataSource, uri);\r\n            int desiredHeight = getNewHeight(source.getWidth(), source.getHeight());\r\n            resized = resizeImage(source, DESIRED_WIDTH, desiredHeight, BufferedImage.TYPE_INT_ARGB);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        width = resized.getWidth();\r\n        height = resized.getHeight();\r\n\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < columns; j++) {\r\n                image = createImage(new FilteredImageSource(resized.getSource(),\r\n                        new CropImageFilter(j * width / rows, i * height / columns, (width / rows), height / columns)));\r\n\r\n                BufferedImage piece = imageToBufferedImage(image);\r\n\r\n                savePuzzlePieceToDisk(piece);\r\n\r\n                long sumRGB = 0;\r\n                for (int y = 0; y < piece.getHeight(); y++) {\r\n                    for (int x = 0; x < piece.getWidth(); x++) {\r\n                        sumRGB += piece.getRGB(x, y);\r\n                    }\r\n                }\r\n\r\n                solutionBitMap.put(solutionBitMap.size(), sumRGB);\r\n\r\n                Button button;\r\n                int newRandomAngle;\r\n                if (!initRotated) {\r\n                    button = new Button(image, this);\r\n                } else {\r\n                    newRandomAngle = new Random().nextInt(4);\r\n                    button = new Button(image, this);\r\n                    button = rotateIcon(button, Button.angles[newRandomAngle]);\r\n                }\r\n\r\n                button.putClientProperty(\"position\", new Point(i, j));\r\n\r\n                buttons.add(button);\r\n            }\r\n        }\r\n\r\n        Collections.shuffle(buttons);\r\n\r\n        for (int i = 0; i < rows * columns; i++) {\r\n            Button button = buttons.get(i);\r\n            panel.add(button);\r\n            button.setBorder(BorderFactory.createLineBorder(Color.gray));\r\n        }\r\n\r\n        pack();\r\n    }\r\n\r\n    private void setupResourcesAndUI() {\r\n        setTitle(\"Puzzle\");\r\n        setVisible(true);\r\n        setSize(800, 600);\r\n        setLocationRelativeTo(null);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n        tabsPane = new JTabbedPane();\r\n        JPanel puzzleTab = panel;\r\n        sourceImageTab = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        puzzlePicture = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n\r\n        tabsPane.addTab(\"Puzzle\", puzzleTab);\r\n        tabsPane.addTab(\"Picture\", puzzlePicture);\r\n        tabsPane.addTab(\"Source\", sourceImageTab);\r\n\r\n        tabsPane.setEnabledAt(0, false);\r\n        tabsPane.setEnabledAt(1, false);\r\n\r\n        JButton selectFromHardDriveButton = new JButton(\"Load from HDD\");\r\n        sourceImageTab.add(selectFromHardDriveButton);\r\n\r\n        JButton selectFromURL = new JButton(\"Load from URL\");\r\n        sourceImageTab.add(selectFromURL);\r\n\r\n        JLabel grid = new JLabel(\"Select Grid\");\r\n\r\n        gridSelection = new JComboBox<>();\r\n        gridSelection.addItem(2);\r\n        gridSelection.addItem(3);\r\n        gridSelection.addItem(4);\r\n        gridSelection.addItem(5);\r\n        gridSelection.addItem(6);\r\n        gridSelection.addItem(7);\r\n        gridSelection.addItem(8);\r\n        gridSelection.addItem(9);\r\n        gridSelection.addItem(10);\r\n\r\n        gridSelection.setSelectedIndex(1);\r\n        gridSelection.setMaximumRowCount(9);\r\n\r\n        sourceImageTab.add(grid);\r\n        sourceImageTab.add(gridSelection);\r\n\r\n        JLabel isRotated = new JLabel(\"Rotate\");\r\n        checkBoxIsRotated = new JCheckBox();\r\n\r\n        sourceImageTab.add(isRotated);\r\n        sourceImageTab.add(checkBoxIsRotated);\r\n\r\n        JMenuBar menuBar = new JMenuBar();\r\n\r\n        JMenu game = new JMenu(\"Game\");\r\n\r\n        playAgain = new JMenuItem(\"Play again\");\r\n        playAgain.setAccelerator(KeyStroke.getKeyStroke(\"R\"));\r\n        playAgain.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                reset();\r\n                initResources();\r\n                tabsPane.setSelectedIndex(0);\r\n            }\r\n        });\r\n        playAgain.setEnabled(false);\r\n        game.add(playAgain);\r\n\r\n        newPuzzle = new JMenuItem(\"New puzzle\");\r\n        newPuzzle.setAccelerator(KeyStroke.getKeyStroke(\"N\"));\r\n        newPuzzle.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                tabsPane.setEnabledAt(0, false);\r\n                tabsPane.setEnabledAt(1, false);\r\n                playAgain.setEnabled(false);\r\n                newPuzzle.setEnabled(false);\r\n                rotateClockwise.setEnabled(false);\r\n                rotateAnticlockwise.setEnabled(false);\r\n                rotateAround.setEnabled(false);\r\n                magicButton.setEnabled(false);\r\n                puzzlePicture.removeAll();\r\n\r\n                tabsPane.setSelectedIndex(2);\r\n            }\r\n        });\r\n        newPuzzle.setEnabled(false);\r\n        game.add(newPuzzle);\r\n\r\n        game.addSeparator();\r\n\r\n        JMenuItem exit = new JMenuItem(\"Exit\");\r\n        exit.addActionListener(e -> System.exit(0));\r\n        game.add(exit);\r\n\r\n        JMenu controls = new JMenu(\"Controls\");\r\n\r\n        rotateClockwise = new JMenuItem(\"Rotate clockwise\");\r\n        rotateClockwise.setAccelerator(KeyStroke.getKeyStroke((char) KeyEvent.VK_D));\r\n        rotateClockwise.addActionListener(e -> rotateIcon(Button.buttonPressed, 90));\r\n        rotateClockwise.setEnabled(false);\r\n        controls.add(rotateClockwise);\r\n\r\n        rotateAnticlockwise = new JMenuItem(\"Rotate anticlockwise\");\r\n        rotateAnticlockwise.setAccelerator(KeyStroke.getKeyStroke((char) KeyEvent.VK_A));\r\n        rotateAnticlockwise.addActionListener(e -> rotateIcon(Button.buttonPressed, -90));\r\n        rotateAnticlockwise.setEnabled(false);\r\n        controls.add(rotateAnticlockwise);\r\n\r\n        rotateAround = new JMenuItem(\"Rotate 180\");\r\n        rotateAround.setAccelerator(KeyStroke.getKeyStroke((char) KeyEvent.VK_W));\r\n        rotateAround.addActionListener(e -> rotateIcon(Button.buttonPressed, 180));\r\n        rotateAround.setEnabled(false);\r\n        controls.add(rotateAround);\r\n\r\n        magicButton = new JMenuItem(\"Magic button\");\r\n        magicButton.setAccelerator(KeyStroke.getKeyStroke(\"M\"));\r\n        magicButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                loadPiecesAndInitPiecesBitMap();\r\n                magicButton();\r\n            }\r\n        });\r\n        magicButton.setEnabled(false);\r\n        controls.add(magicButton);\r\n\r\n        menuBar.add(game);\r\n        menuBar.add(controls);\r\n\r\n        setJMenuBar(menuBar);\r\n\r\n        selectFromHardDriveButton.addActionListener(new FileChooserListener(this));\r\n        selectFromURL.addActionListener(new URListener(this));\r\n\r\n        add(tabsPane);\r\n        tabsPane.setSelectedIndex(2);\r\n    }\r\n\r\n    private void reset() {\r\n        buttons = new ArrayList<>();\r\n        solutionPoints = new ArrayList<>();\r\n        solutionAngles = new ArrayList<>();\r\n        solutionBitMap = new HashMap<>();\r\n        piecesBitMap = new HashMap<>();\r\n        icons = new ArrayList<>();\r\n        panel.removeAll();\r\n        puzzlePicture.removeAll();\r\n    }\r\n\r\n    public void initResources() {\r\n        try {\r\n            rows = (int) gridSelection.getSelectedItem();\r\n            columns = (int) gridSelection.getSelectedItem();\r\n            if (checkBoxIsRotated.isSelected()) {\r\n                initRotated = true;\r\n            }\r\n\r\n            reset();\r\n            initUI();\r\n            setLocationRelativeTo(null);\r\n\r\n            JLabel picLabel = new JLabel(new ImageIcon(resized));\r\n            puzzlePicture.add(picLabel);\r\n\r\n            tabsPane.setEnabledAt(0, true);\r\n            tabsPane.setEnabledAt(1, true);\r\n            playAgain.setEnabled(true);\r\n            newPuzzle.setEnabled(true);\r\n            rotateClockwise.setEnabled(true);\r\n            rotateAnticlockwise.setEnabled(true);\r\n            rotateAround.setEnabled(true);\r\n            magicButton.setEnabled(true);\r\n        } catch (URISyntaxException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void savePuzzlePieceToDisk(BufferedImage piece) {\r\n        Path path = Paths.get(\"./pieces\");\r\n\r\n        try {\r\n            if (Files.notExists(path)) {\r\n                Files.createDirectory(path);\r\n            }\r\n\r\n            ImageIO.write(piece, \"png\", new File(\"./pieces/\" + piece.hashCode() + \".png\"));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void loadPiecesAndInitPiecesBitMap() {\r\n        File[] pieces = new File(\"./pieces\").listFiles();\r\n        for (int i = 0; i < pieces.length; i++) {\r\n            BufferedImage piece = null;\r\n            try {\r\n                piece = ImageIO.read(pieces[i]);\r\n                icons.add(new ImageIcon(piece));\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            long sumRGB = 0;\r\n            for (int y = 0; y < piece.getHeight(); y++) {\r\n                for (int x = 0; x < piece.getWidth(); x++) {\r\n                    sumRGB += piece.getRGB(x, y);\r\n                }\r\n            }\r\n\r\n            piecesBitMap.put(piecesBitMap.size(), sumRGB);\r\n        }\r\n\r\n        for (File piece : pieces) {\r\n            piece.delete();\r\n        }\r\n    }\r\n\r\n    private void magicButton() {\r\n        piecesBitMap.forEach((piecesKey, piecesValue) -> {\r\n            solutionBitMap.forEach((solutionKey, solutionValue) -> {\r\n                if (piecesValue.equals(solutionValue)) {\r\n                    buttons.get(solutionKey).setIcon(icons.get(piecesKey));\r\n                    updateButtons();\r\n                }\r\n            });\r\n        });\r\n\r\n        for (int i = 0; i < buttons.size(); i++) {\r\n            buttons.get(i).putClientProperty(\"position\", solutionPoints.get(i));\r\n            buttons.get(i).setAngle(0);\r\n        }\r\n\r\n        pack();\r\n        setLocationRelativeTo(null);\r\n        checkSolution();\r\n    }\r\n\r\n    private int getNewHeight(int w, int h) {\r\n        double ratio = DESIRED_WIDTH / (double) w;\r\n        int newHeight = (int) (h * ratio);\r\n        return newHeight;\r\n    }\r\n\r\n    private BufferedImage loadImage(String dataSource, String uri) {\r\n        BufferedImage bufferedImage = null;\r\n\r\n        try {\r\n            if (dataSource.equals(\"HDD\")) {\r\n                bufferedImage = ImageIO.read(new File(uri));\r\n            } else if (dataSource.equals(\"URL\")) {\r\n                bufferedImage = ImageIO.read(new URL(uri));\r\n            }\r\n        } catch (IOException e) {\r\n            e.getStackTrace();\r\n        }\r\n\r\n        return bufferedImage;\r\n    }\r\n\r\n    private BufferedImage resizeImage(BufferedImage originalImage, int width,\r\n                                      int height, int type) throws IOException {\r\n\r\n        BufferedImage resizedImage = new BufferedImage(width, height, type);\r\n        Graphics2D graphics = resizedImage.createGraphics();\r\n        graphics.drawImage(originalImage, 0, 0, width, height, null);\r\n        graphics.dispose();\r\n\r\n        return resizedImage;\r\n    }\r\n\r\n    public void updateButtons() {\r\n        panel.removeAll();\r\n\r\n        for (JComponent btn : buttons) {\r\n            panel.add(btn);\r\n        }\r\n\r\n        panel.validate();\r\n    }\r\n\r\n    public void checkSolution() {\r\n        List<Point> currentPoints = new ArrayList<>();\r\n        List<Integer> currentAngles = new ArrayList<>();\r\n\r\n        buttons.forEach((e) -> currentPoints.add((Point) e.getClientProperty(\"position\")));\r\n        buttons.forEach((e) -> currentAngles.add(e.getAngle()));\r\n\r\n        if (compareList(solutionPoints, currentPoints) && compareList(solutionAngles, currentAngles)) {\r\n            JOptionPane.showMessageDialog(panel, \"Puzzle assembled!\",\"Congratulations!\", JOptionPane.INFORMATION_MESSAGE);\r\n            solutionPoints = null;\r\n            panel.setBorder(BorderFactory.createLineBorder(Color.green));\r\n            Button.buttonPressed.setBorder(BorderFactory.createLineBorder(Color.gray));\r\n        }\r\n    }\r\n\r\n    public static boolean compareList(List<?> list1, List<?> list2) {\r\n        return list1.toString().contentEquals(list2.toString());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Puzzle puzzle = null;\r\n        try {\r\n            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n            puzzle = new Puzzle();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        puzzle.setVisible(true);\r\n    }\r\n\r\n    public static Icon rotateImage(Image img, double angle) {\r\n        double sin = Math.abs(Math.sin(Math.toRadians(angle))),\r\n                cos = Math.abs(Math.cos(Math.toRadians(angle)));\r\n\r\n        int w = img.getWidth(null), h = img.getHeight(null);\r\n\r\n        int neww = (int) Math.floor(w*cos + h*sin),\r\n                newh = (int) Math.floor(h*cos + w*sin);\r\n\r\n        BufferedImage bimg = new BufferedImage(neww, newh, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g = bimg.createGraphics();\r\n\r\n        g.translate((neww-w)/2, (newh-h)/2);\r\n        g.rotate(Math.toRadians(angle), w/2, h/2);\r\n        g.drawRenderedImage(imageToBufferedImage(img), null);\r\n        g.dispose();\r\n\r\n        Icon rotatedIcon = new ImageIcon(bimg);\r\n\r\n        return rotatedIcon;\r\n    }\r\n\r\n    public Button rotateIcon(Button button, int angle) {\r\n        Icon newIcon = button.getIcon();\r\n        Image newImage = iconToBufferedImage(newIcon);\r\n        newIcon = rotateImage(newImage, angle);\r\n        button.setIcon(newIcon);\r\n        button.setAngle(button.getAngle() + angle);\r\n\r\n        if (button.getAngle() == 360 || button.getAngle() == -360) {\r\n            button.setAngle(0);\r\n        } else if (button.getAngle() > 360) {\r\n            button.setAngle(button.getAngle() - 360);\r\n        } else if (button.getAngle() < 0) {\r\n            button.setAngle(button.getAngle() + 360);\r\n        }\r\n\r\n        pack();\r\n        setLocationRelativeTo(null);\r\n\r\n        return button;\r\n    }\r\n\r\n    public static BufferedImage imageToBufferedImage(Image im) {\r\n        BufferedImage bi = new BufferedImage\r\n                (im.getWidth(null),im.getHeight(null),BufferedImage.TYPE_INT_ARGB);\r\n        Graphics bg = bi.getGraphics();\r\n        bg.drawImage(im, 0, 0, null);\r\n        bg.dispose();\r\n        return bi;\r\n    }\r\n\r\n    public static BufferedImage iconToBufferedImage(Icon icon) {\r\n        BufferedImage bi = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);\r\n        Graphics g = bi.createGraphics();\r\n        icon.paintIcon(null, g, 0,0);\r\n        g.dispose();\r\n\r\n        return bi;\r\n    }\r\n\r\n    public List<Button> getButtons() {\r\n        return buttons;\r\n    }\r\n\r\n    public JPanel getPanel() {\r\n        return panel;\r\n    }\r\n\r\n    public JPanel getSourceImageTab() {\r\n        return sourceImageTab;\r\n    }\r\n\r\n    public JTabbedPane getTabsPane() {\r\n        return tabsPane;\r\n    }\r\n\r\n    public void setDataSource(String dataSource) {\r\n        this.dataSource = dataSource;\r\n    }\r\n\r\n    public void setUri(String uri) {\r\n        this.uri = uri;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/zauberschlosss/main/Puzzle.java	(revision ca50be116c741c2fadb52361d304b1101e1ab8cd)
+++ src/com/zauberschlosss/main/Puzzle.java	(date 1600076772445)
@@ -70,7 +70,6 @@
 
         panel.setBorder(BorderFactory.createLineBorder(Color.gray));
         panel.setLayout(new GridLayout(rows, columns, 0, 0));
-        panel.addKeyListener(new KeyListener(this));
 
         try {
             source = loadImage(dataSource, uri);
@@ -135,6 +134,7 @@
         setLocationRelativeTo(null);
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 
+        panel.addKeyListener(new KeyListener(this));
         tabsPane = new JTabbedPane();
         JPanel puzzleTab = panel;
         sourceImageTab = new JPanel(new FlowLayout(FlowLayout.CENTER));
@@ -226,7 +226,7 @@
 
         rotateClockwise = new JMenuItem("Rotate clockwise");
         rotateClockwise.setAccelerator(KeyStroke.getKeyStroke((char) KeyEvent.VK_D));
-        rotateClockwise.addActionListener(e -> rotateIcon(Button.buttonPressed, 90));
+//        rotateClockwise.addActionListener(e -> rotateIcon(Button.buttonPressed, 90));
         rotateClockwise.setEnabled(false);
         controls.add(rotateClockwise);
 
